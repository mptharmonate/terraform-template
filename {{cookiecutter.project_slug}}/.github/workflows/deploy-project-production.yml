name: Deploy production {{ cookiecutter.project_name }}

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:

env:
  AWS_REGION: { { cookiecutter.region } }
  TERRAFORM_VERSION: { { cookiecutter.terraform_version } }
  WORKING_DIRECTORY: .
  TF_VAR_environment: { { cookiecutter.environment } }
  TF_VAR_project_name: { { cookiecutter.project_name } }
  ROLE_TO_ASSUME: ${{ '{{' }} secrets.SANDBOX_AWS_ROLE_TO_ASSUME {{ '}}' }}
  PROJECT_NAME: { { cookiecutter.project_name } }
  # FRONTEND_DIRECTORY: frontend/build
  # UPDATE_MIME_TYPES_SCRIPT: ./scripts/update_mime_types.sh

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: { { cookiecutter.environment } }

    permissions:
      id-token: write
      contents: read
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ '{{' }} env.ROLE_TO_ASSUME {{ '}}' }}
          aws-region: ${{ '{{' }} env.AWS_REGION {{ '}}' }}

      - name: Validate variables
        run: ./scripts/validate_vars.sh ./vars/${{ '{{' }} env.TF_VAR_environment {{ '}}' }}.tfvars

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.1
        with:
          terraform_version: ${{ '{{' }} env.TERRAFORM_VERSION {{ '}}' }}

      - name: Generate backend configuration
        run: ./scripts/generate_backend_config.sh
        env:
          TF_VAR_environment: ${{ '{{' }} env.TF_VAR_environment {{ '}}' }}

      - name: Terraform Init
        working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
        run: terraform init
        env:
          TF_VAR_environment: ${{ '{{' }} env.TF_VAR_environment {{ '}}' }}

      - name: Select Terraform Workspace
        working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
        run: terraform workspace select -or-create=true ${{ '{{' }} env.TF_VAR_environment {{ '}}' }}
        env:
          TF_VAR_environment: ${{ '{{' }} env.TF_VAR_environment {{ '}}' }}

      - name: Terraform Plan
        working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
        run: terraform plan -var-file=./vars/${{ '{{' }} env.TF_VAR_environment {{ '}}' }}.tfvars -out=./tfplan -lock=false
        env:
          TF_VAR_environment: ${{ '{{' }} env.TF_VAR_environment {{ '}}' }}

      - name: Save tfplan to artifact store
        uses: actions/upload-artifact@v4.3.3
        with:
          name: tfplan
          path: ./tfplan
          overwrite: true

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: plan
    environment: { { cookiecutter.environment } }

    permissions:
      id-token: write
      contents: read
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ '{{' }} env.ROLE_TO_ASSUME {{ '}}' }}
          aws-region: ${{ '{{' }} env.AWS_REGION {{ '}}' }}

      - name: Download Terraform plan from artifact store
        uses: actions/download-artifact@v4.1.7
        with:
          name: tfplan
          path: .

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.1
        with:
          terraform_version: ${{ '{{' }} env.TERRAFORM_VERSION {{ '}}' }}

      - name: Generate backend configuration
        run: ./scripts/generate_backend_config.sh
        env:
          TF_VAR_environment: ${{ '{{' }} env.TF_VAR_environment {{ '}}' }}

      - name: Terraform Init
        working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
        run: terraform init
        env:
          TF_VAR_environment: ${{ '{{' }} env.TF_VAR_environment {{ '}}' }}

      - name: Select Terraform Workspace
        working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
        run: terraform workspace select -or-create=true ${{ '{{' }} env.TF_VAR_environment {{ '}}' }}
        env:
          TF_VAR_environment: ${{ '{{' }} env.TF_VAR_environment {{ '}}' }}

      - name: Terraform Apply
        working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
        run: |
          terraform apply ./tfplan
          LOCK_ID=$(terraform state show | grep 'lock_id' | awk '{print $2}')
          echo "LOCK_ID=$LOCK_ID" >> $GITHUB_ENV
        env:
          TF_VAR_environment: ${{ '{{' }} env.TF_VAR_environment {{ '}}' }}

      - name: Get Terraform outputs
        working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
        id: tf_outputs
        run: |
          outputs=$(terraform output -json)
          echo "SSM_PARAMETER_NAMES=$(echo $outputs | jq -c .ssm_parameter_names.value)" >> output_vars.txt
          echo "COMMON_TAGS=$(echo $outputs | jq -c .common_tags.value)" >> output_vars.txt

      - name: Set environment variables
        working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
        run: |
          while IFS= read -r line; do echo "$line" >> $GITHUB_ENV; done < output_vars.txt

      - name: Set job outputs
        id: set-outputs
        working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
        run: |
          while IFS= read -r line; do
            echo "${line%%=*}=${line#*=}" >> $GITHUB_OUTPUT
          done < output_vars.txt

      - name: Apply Tags to SSM Parameters
        run: |
          parameter_names=$(echo "$SSM_PARAMETER_NAMES" | jq -r '.[]')
          tags=$(echo "$COMMON_TAGS" | jq -r 'to_entries | map("Key=\(.key),Value=\(.value|tostring)") | join(" ")')

          for parameter_name in $parameter_names; do
            aws ssm add-tags-to-resource --resource-type Parameter --resource-id $parameter_name --tags $tags
          done

      - name: Add summary
        run: |
          echo "### Terraform Apply Summary" >> $GITHUB_STEP_SUMMARY
          echo "SSM Parameter Names: $SSM_PARAMETER_NAMES" >> $GITHUB_STEP_SUMMARY
          echo "Common Tags: $COMMON_TAGS" >> $GITHUB_STEP_SUMMARY

    outputs:
      ssm_parameter_names: ${{ '{{' }} steps.set-outputs.outputs.SSM_PARAMETER_NAMES {{ '}}' }}
      common_tags: ${{ '{{' }} steps.set-outputs.outputs.COMMON_TAGS {{ '}}' }}

  cleanup:
    name: Cancel Cleanup
    runs-on: ubuntu-latest
    needs: apply
    environment: { { cookiecutter.environment } }
    if: ${{ '{{' }}  github.event.workflow_run.conclusion == 'cancelled' {{ '}}' }}

    permissions:
      id-token: write
      contents: read
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ '{{' }} env.ROLE_TO_ASSUME {{ '}}' }}
          aws-region: ${{ '{{' }} env.AWS_REGION {{ '}}' }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.1
        with:
          terraform_version: ${{ '{{' }} env.TERRAFORM_VERSION {{ '}}' }}

      - name: Generate backend configuration
        run: ./scripts/generate_backend_config.sh
        env:
          TF_VAR_environment: ${{ '{{' }} env.TF_VAR_environment {{ '}}' }}

      - name: Terraform Init
        working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
        run: terraform init
        env:
          TF_VAR_environment: ${{ '{{' }} env.TF_VAR_environment {{ '}}' }}

      - name: Select Terraform Workspace
        working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
        run: terraform workspace select -or-create=true ${{ '{{' }} env.TF_VAR_environment {{ '}}' }}
        env:
          TF_VAR_environment: ${{ '{{' }} env.TF_VAR_environment {{ '}}' }}

      - name: Unlock Terraform Remote State becaused workflow was cancelled
        working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
        run: |
          terraform force-unlock -force ${{ '{{' }} env.LOCK_ID {{ '}}' }}

  # frontend:
  #   name: Deploy Frontend
  #   runs-on: ubuntu-latest
  #   needs: apply
  #   environment: {{ cookiecutter.environment }}

  #   permissions:
  #     id-token: write
  #     contents: read
  #     actions: write

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4.1.6

  #     - name: Debug outputs in frontend job
  #       run: |
  #         echo "SSM_PARAMETER_NAMES: ${{ '{{' }} needs.apply.outputs.ssm_parameter_names {{ '}}' }}"
  #         echo "COMMON_TAGS: ${{ '{{' }}needs.apply.outputs.common_tags {{ '}}' }}"

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4.0.2
  #       with:
  #         node-version: "latest"

  #     - name: Install dependencies
  #       working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
  #       run: |
  #         cd frontend
  #         npm install --loglevel=error --no-fund

  #     - name: Build Frontend
  #       working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
  #       run: |
  #         cd frontend
  #         npm run build

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4.0.2
  #       with:
  #         role-to-assume: ${{ '{{' }} env.ROLE_TO_ASSUME {{ '}}' }}
  #         aws-region: ${{ '{{' }} env.AWS_REGION {{ '}}' }}

  #     - name: Sync S3 bucket
  #       working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
  #       run: |
  #         echo "Syncing build directory to S3 bucket: ${{ '{{' }} needs.apply.outputs.s3_bucket_name {{ '}}' }}"

  #         # Sync the build directory to the S3 bucket and delete any files that are no longer in the build directory
  #         aws s3 sync ${{ '{{' }} env.FRONTEND_DIRECTORY {{ '}}' }} s3://${{ '{{' }} needs.apply.outputs.s3_bucket_name {{ '}}' }} --delete

  #     - name: Set mime types on s3 objects
  #       working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
  #       run: |
  #         chmod +x ${{ '{{' }} env.UPDATE_MIME_TYPES_SCRIPT{{ '}}' }}
  #         ${{ '{{' }} env.UPDATE_MIME_TYPES_SCRIPT{{ '}}' }} ${{ '{{' }} env.FRONTEND_DIRECTORY {{ '}}' }} ${{ '{{' }} needs.apply.outputs.s3_bucket_name {{ '}}' }}

  #     - name: Invalidate CloudFront cache
  #       run: |
  #         aws cloudfront create-invalidation \
  #           --distribution-id ${{ '{{' }} needs.apply.outputs.cloudfront_distribution_id {{ '}}' }} \
  #           --paths "/*"

  #     - name: Add summary
  #       run: |
  #         echo "### Frontend Deployment Summary" >> $GITHUB_STEP_SUMMARY
  #         echo "Frontend Domain Name:${{ '{{' }} needs.apply.outputs.frontend_domain_name {{ '}}' }}}" >> $GITHUB_STEP_SUMMARY

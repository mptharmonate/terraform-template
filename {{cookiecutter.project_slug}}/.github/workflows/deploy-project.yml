name: Deploy {{ cookiecutter.project_name }}

on:
  # push:
  #   branches:
  #     - {{ cookiecutter.default_branch }}
  workflow_dispatch:

env:
  AWS_REGION: { { cookiecutter.region } }
  TERRAFORM_VERSION: { { cookiecutter.terraform_version } }
  WORKING_DIRECTORY: .

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: { { cookiecutter.environment } }

    permissions:
      id-token: write
      contents: read
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ '{{' }} secrets.SANDBOX_AWS_ROLE_TO_ASSUME {{ '}}' }}
          aws-region: ${{ '{{' }} env.AWS_REGION {{ '}}' }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ '{{' }} env.TERRAFORM_VERSION {{ '}}' }}

      - name: Terraform Init
        working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
        run: terraform plan -out=./tfplan

      - name: Save tfplan to artifact store
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ./tfplan
          overwrite: true

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: plan
    environment: { { cookiecutter.environment } }

    permissions:
      id-token: write
      contents: read
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ '{{' }} secrets.SANDBOX_AWS_ROLE_TO_ASSUME {{ '}}' }}
          aws-region: ${{ '{{' }} env.AWS_REGION {{ '}}' }}

      - name: Download Terraform plan from artifact store
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: .

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ '{{' }} env.TERRAFORM_VERSION {{ '}}' }}

      - name: Terraform Init
        working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
        run: terraform apply ./tfplan

      - name: Install AWS CLI and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli jq

      - name: Get Terraform outputs
        working-directory: ${{ '{{' }} env.WORKING_DIRECTORY {{ '}}' }}
        id: tf_outputs
        run: |
          terraform output -json ssm_parameter_names > ssm_parameter_names.json
          terraform output -json common_tags > common_tags.json

      - name: Set environment variables for Terraform outputs
        id: set_env_vars
        run: |
          echo "SSM_PARAMETER_NAMES=$(jq -c . ssm_parameter_names.json)" >> $GITHUB_ENV
          echo "COMMON_TAGS=$(jq -c . common_tags.json)" >> $GITHUB_ENV

      - name: Apply Tags to SSM Parameters
        run: |
          parameter_names=$(echo "$SSM_PARAMETER_NAMES" | jq -r '.[]')
          tags=$(echo "$COMMON_TAGS" | jq -r 'to_entries | map("Key=\(.key),Value=\(.value|tostring)") | join(" ")')

          for parameter_name in $parameter_names; do
            aws ssm add-tags-to-resource --resource-type Parameter --resource-id $parameter_name --tags $tags
          done
